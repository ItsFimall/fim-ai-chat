// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户角色枚举
enum UserRole {
  ADMIN    // 管理员
  USER     // 普通用户
  GUEST    // 访客
}

// 用户模型
model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  username  String?  @unique
  password  String?  // 密码哈希，访客用户可以为空
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  canShareAccessCode Boolean @default(true) // 是否可以分发访问码

  // 邀请码相关（仅管理员和用户有）
  invitedBy String?  // 邀请者ID
  usedInviteCode String? // 使用的邀请码

  // 访客相关
  usedAccessCode String? // 访客使用的访问码
  hostUserId String? // 访客的宿主用户ID

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  conversations     Conversation[]
  messages          Message[]
  settings          UserSettings?
  tokenUsage        TokenUsage[]
  permissions       UserPermission?

  // 邀请码管理（管理员和用户可以生成邀请码）
  generatedInvites  InviteCode[]

  // 访问码管理（用户可以生成访问码）
  generatedAccessCodes AccessCode[]

  // 模型分组排序配置
  modelGroupOrders ModelGroupOrder[]

  @@map("users")
}

// 用户设置
model UserSettings {
  id               String  @id @default(cuid())
  userId           String  @unique
  defaultModelId   String?
  theme            String  @default("light") // light, dark, auto
  language         String  @default("zh-CN")
  enableMarkdown   Boolean @default(true)
  enableLatex      Boolean @default(true)
  enableCodeHighlight Boolean @default(true)
  messagePageSize  Int     @default(50)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// 系统设置模型
model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique // 设置键名
  value String // 设置值（JSON字符串）
  type  String @default("string") // 值类型：string, number, boolean, json
  description String? // 设置描述

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// AI 服务提供商
model Provider {
  id          String   @id @default(cuid())
  name        String   @unique // OpenAI, Anthropic, Google, etc.
  displayName String   // 显示名称
  baseUrl     String?  // API 基础 URL
  apiKey      String?  // 加密存储的 API Key
  isEnabled   Boolean  @default(true)
  order       Int      @default(0) // 排序
  icon        String?  // 图标 URL 或名称
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  models        Model[]
  conversations Conversation[]
  messages      Message[]
  tokenUsage    TokenUsage[]

  @@map("providers")
}

// AI 模型
model Model {
  id          String   @id @default(cuid())
  providerId  String
  modelId     String   // 模型的实际 ID，如 gpt-4o-mini
  name        String   // 显示名称
  description String?
  isEnabled   Boolean  @default(true)
  order       Int      @default(0) // 在提供商内的排序
  group       String?  // 模型分组，如 GPT-4, Claude-3 等

  // 模型配置
  maxTokens      Int?     // 最大 token 数
  temperature    Float?   // 温度参数
  topP           Float?   // top_p 参数
  frequencyPenalty Float? // 频率惩罚
  presencePenalty  Float? // 存在惩罚

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  provider      Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  messages      Message[]
  tokenUsage    TokenUsage[]

  @@unique([providerId, modelId])
  @@map("models")
}

// 对话
model Conversation {
  id          String   @id @default(cuid())
  userId      String
  providerId  String
  modelId     String
  title       String   // AI 生成的标题
  isArchived  Boolean  @default(false)
  isPinned    Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   Provider     @relation(fields: [providerId], references: [id])
  model      Model        @relation(fields: [modelId], references: [id])
  messages   Message[]
  tokenUsage TokenUsage[]

  @@map("conversations")
}

// 消息
model Message {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  providerId     String
  modelId        String
  role           String   // user, assistant, system
  content        String   // 消息内容
  rawContent     String?  // 原始内容（用于编辑）
  isEdited       Boolean  @default(false)
  isDeleted      Boolean  @default(false)

  // AI 响应相关
  finishReason   String?  // stop, length, content_filter, etc.
  tokenUsage     Json?    // token 使用情况

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider     Provider     @relation(fields: [providerId], references: [id])
  model        Model        @relation(fields: [modelId], references: [id])

  @@map("messages")
}

// 邀请码模型
model InviteCode {
  id          String   @id @default(cuid())
  code        String   @unique // fimai开头的邀请码
  createdBy   String   // 创建者ID
  isUsed      Boolean  @default(false)
  usedBy      String?  // 使用者ID
  usedAt      DateTime?
  expiresAt   DateTime? // 过期时间
  maxUses     Int      @default(1) // 最大使用次数
  currentUses Int      @default(0) // 当前使用次数

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("invite_codes")
}

// 访问码模型
model AccessCode {
  id          String   @id @default(cuid())
  code        String   @unique // fimai开头的访问码
  createdBy   String   // 创建者ID（用户）
  isActive    Boolean  @default(true)
  expiresAt   DateTime? // 过期时间
  maxUses     Int?     // 最大使用次数，null表示无限制
  currentUses Int      @default(0) // 当前使用次数

  // 权限设置
  allowedModelIds String? // 允许使用的模型ID列表，用逗号分隔

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("access_codes")
}

// Token使用统计
model TokenUsage {
  id             String   @id @default(cuid())
  userId         String   // 使用者ID
  conversationId String?  // 对话ID（可选）
  messageId      String?  // 消息ID（可选）
  providerId     String   // 提供商ID
  modelId        String   // 模型ID

  // Token统计
  promptTokens     Int     // 输入token数
  completionTokens Int     // 输出token数
  totalTokens      Int     // 总token数

  // 如果API不提供token统计，则使用字符/词数估算
  isEstimated      Boolean @default(false) // 是否为估算值
  inputChars       Int?    // 输入字符数
  outputChars      Int?    // 输出字符数

  // 成本计算（可选）
  cost             Float?  // 成本（美元）

  createdAt DateTime @default(now())

  // 关联关系
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)
  provider     Provider      @relation(fields: [providerId], references: [id])
  model        Model         @relation(fields: [modelId], references: [id])

  @@map("token_usage")
}

// 用户权限配置（管理员分发给用户的权限）
model UserPermission {
  id              String   @id @default(cuid())
  userId          String   @unique // 用户ID
  allowedModelIds String? // 允许使用的模型ID列表，用逗号分隔
  tokenLimit      Int?     // token使用限制，null表示无限制
  tokenUsed       Int      @default(0) // 已使用的token数
  canShareAccess  Boolean  @default(true) // 是否可以分发访问码
  isActive        Boolean  @default(true) // 权限是否激活

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_permissions")
}

// 模型分组排序配置
model ModelGroupOrder {
  id          String   @id @default(cuid())
  userId      String
  groupName   String   // 分组名称，如 "ChatGPT", "Claude", "Gemini" 等
  order       Int      @default(0) // 排序值，越小越靠前
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupName])
  @@index([userId])
  @@index([order])
  @@map("model_group_orders")
}
